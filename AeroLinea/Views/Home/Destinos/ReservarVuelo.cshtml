@model AeroLinea.Models.Vuelo

@{
    ViewData["Title"] = "Reservar Vuelo";
}

<style>
    body {
        background: linear-gradient(135deg, #e14a4a 0%, #ff6b6b 100%);
        min-height: 100vh;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container {
        max-width: 800px;
        margin: 0 auto;
    }

    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        margin-bottom: 30px;
    }

    .card-body {
        padding: 30px;
    }

    .card-title {
        color: #e14a4a;
        font-size: 1.8em;
        font-weight: 600;
        margin-bottom: 20px;
        border-bottom: 2px solid #ff6b6b;
        padding-bottom: 10px;
    }

    .card-text {
        font-size: 1.1em;
        color: #444;
        margin-bottom: 25px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #ddd;
        padding: 12px;
        font-size: 1em;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #e14a4a;
        box-shadow: 0 0 0 0.2rem rgba(225, 74, 74, 0.25);
    }

    label {
        font-weight: 500;
        color: #555;
        margin-bottom: 8px;
    }

    .btn-primary {
        background: #e14a4a;
        border: none;
        padding: 12px 30px;
        font-size: 1.1em;
        font-weight: 500;
        border-radius: 8px;
        transition: all 0.3s ease;
        width: 100%;
        margin-top: 20px;
    }

    .btn-primary:hover {
        background: #ff6b6b;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(225, 74, 74, 0.3);
    }

    #precioTotal {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #e14a4a;
        font-size: 1.2em;
    }

    .pasajero-grupo {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        border: 1px solid #eee;
    }

    .pasajero-grupo h6 {
        color: #e14a4a;
        margin-bottom: 15px;
        font-weight: 600;
    }

    select.form-control {
        cursor: pointer;
    }

    input[type="number"] {
        -moz-appearance: textfield;
    }

    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    @@media (max-width: 768px) {
        .container {
            padding: 10px;
        }

        .card-body {
            padding: 20px;
        }

        .card-title {
            font-size: 1.5em;
        }
    }
</style>

<div class="container mt-4">
    <h2 class="text-center text-white mb-4">Reservar Vuelo</h2>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <!-- Columna izquierda: Información del vuelo -->
                <div class="col-md-4">
                    <div class="text-center mb-4">
                        <img src="~/img/@(Model.destinoVuelo.ToUpper()).jpeg" 
                             alt="@Model.destinoVuelo" 
                             class="img-fluid rounded" 
                             style="max-height: 200px; width: 100%; object-fit: cover;" />
                    </div>
                    <h5 class="card-title">Detalles del Vuelo</h5>
                    <div class="card-text">
                        <p><strong>Origen:</strong> @Model.origenVuelo</p>
                        <p><strong>Destino:</strong> @Model.destinoVuelo</p>
                        <p><strong>Fecha:</strong> @Model.fechaVuelo.ToString("dd/MM/yyyy HH:mm")</p>
                        <p><strong>Precio por Pasajero:</strong> S/ @Model.precioVuelo.ToString("N2")</p>
                    </div>
                </div>

                <!-- Columna derecha: Formulario de reserva -->
                <div class="col-md-8">
                    <form asp-action="ReservarVuelo" method="post" class="needs-validation" novalidate>
                        <input type="hidden" name="idVuelo" value="@Model.idVuelo" />
                        <div class="form-group">
                            <label for="numPasajeros">Número de Pasajeros:</label>
                            <input type="number" class="form-control" id="numPasajeros" name="numPasajeros" 
                                   min="1" max="8" required 
                                   onchange="validarNumPasajeros(this)" 
                                   oninput="validarNumPasajeros(this)" />
                            <div class="invalid-feedback">Seleccione entre 1 y 8 pasajeros</div>
                        </div>

                        <div id="camposPasajeros">
                            <!-- Los campos de pasajeros adicionales se generarán aquí dinámicamente -->
                        </div>

                        <div class="form-group">
                            <label for="mascotas">¿Tiene mascotas?</label>
                            <select class="form-control" id="mascotas" name="mascotas" required onchange="actualizarPrecioTotal()">
                                <option value="No">No</option>
                                <option value="Sí">Sí</option>
                            </select>
                            <div class="invalid-feedback">Seleccione una opción</div>
                        </div>

                        <div class="form-group">
                            <label for="precioTotal">Precio Total:</label>
                            <input type="text" class="form-control" id="precioTotal" readonly />
                        </div>

                        <button type="submit" class="btn btn-primary">Reservar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function validarNumPasajeros(input) {
        const valor = parseInt(input.value);
        if (isNaN(valor) || valor < 1 || valor > 8) {
            input.setCustomValidity('Seleccione entre 1 y 8 pasajeros');
            input.classList.add('is-invalid');
        } else {
            input.setCustomValidity('');
            input.classList.remove('is-invalid');
            actualizarCamposPasajeros();
        }
    }

    function actualizarCamposPasajeros() {
        const numPasajeros = document.getElementById('numPasajeros').value;
        const camposPasajeros = document.getElementById('camposPasajeros');
        camposPasajeros.innerHTML = '';

        if (numPasajeros > 1) {
            for (let i = 1; i < numPasajeros; i++) {
                camposPasajeros.innerHTML += `
                    <div class="pasajero-grupo">
                        <h6>Pasajero Adicional ${i}</h6>
                        <div class="form-group">
                            <label for="nombre${i}">Nombre:</label>
                            <input type="text" class="form-control" id="nombre${i}" name="nombre${i}" 
                                   maxlength="30" minlength="5" required 
                                   oninput="validarNombre(this)" />
                            <div class="invalid-feedback">El nombre debe tener entre 5 y 30 caracteres y solo letras</div>
                        </div>
                        <div class="form-group">
                            <label for="dni${i}">DNI:</label>
                            <input type="text" class="form-control" id="dni${i}" name="dni${i}" 
                                   maxlength="8" minlength="8" required 
                                   oninput="validarDNI(this)" />
                            <div class="invalid-feedback">El DNI debe tener 8 dígitos</div>
                        </div>
                        <div class="form-group">
                            <label for="edad${i}">Edad:</label>
                            <input type="number" class="form-control" id="edad${i}" name="edad${i}" 
                                   min="0" max="120" required 
                                   oninput="validarEdad(this)" />
                            <div class="invalid-feedback">La edad debe estar entre 0 y 120 años</div>
                        </div>
                    </div>
                `;
            }
        }
        actualizarPrecioTotal();
    }

    function validarNombre(input) {
        input.value = input.value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑ\s]/g, '');
        if (input.value.length < 5 || input.value.length > 30) {
            input.setCustomValidity('El nombre debe tener entre 5 y 30 caracteres');
        } else {
            input.setCustomValidity('');
        }
    }

    function validarDNI(input) {
        input.value = input.value.replace(/[^0-9]/g, '');
        if (input.value.length !== 8) {
            input.setCustomValidity('El DNI debe tener 8 dígitos');
        } else {
            input.setCustomValidity('');
        }
    }

    function validarEdad(input) {
        const edad = parseInt(input.value);
        if (isNaN(edad) || edad < 0 || edad > 120) {
            input.setCustomValidity('La edad debe estar entre 0 y 120 años');
        } else {
            input.setCustomValidity('');
        }
    }

    function actualizarPrecioTotal() {
        const numPasajeros = document.getElementById('numPasajeros').value;
        const mascotas = document.getElementById('mascotas').value;
        const precioPorPasajero = @Model.precioVuelo;
        let precioTotal = precioPorPasajero * numPasajeros;
        if (mascotas === 'Sí') {
            precioTotal += 50;
        }
        document.getElementById('precioTotal').value = `S/ ${precioTotal.toFixed(2)}`;
    }

    // Validación del formulario
    (function () {
        'use strict'
        var forms = document.querySelectorAll('.needs-validation')
        Array.prototype.slice.call(forms).forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }
                form.classList.add('was-validated')
            }, false)
        })
    })()
</script> 